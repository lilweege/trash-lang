? TODO: fix char arrays and rewrite this example
? TODO: add sleep time
? TODO: come up with more interesting initial conditions

? https://en.wikipedia.org/wiki/Conway's_Game_of_Life

i64 W; W = 20;
i64 H; H = 10;

? SIZE = (W+1) * H
? add one to width for new lines
? board will be printed with puts
i64[200] prvBoard;
i64[200] curBoard;

? initialize memory
i64 i; i = 0;
while (i < H) {
    i64 j; j = 0;
    while (j < W) {
        i64 idx; idx = i * W + j;
        prvBoard[idx] = 0;
        curBoard[idx] = 0;
        j = j + 1;
    }
    i = i + 1;
}

? initial conditions
prvBoard[21] = 1;
prvBoard[22] = 1;
prvBoard[23] = 1;


? VT escape codes
u8[8] cursorClear;
cursorClear = ".[2J";
cursorClear[0] = itoc(27);
u8[8] cursorHome;
cursorHome = ".[H";
cursorHome[0] = itoc(27);


puts(cursorClear);
i64 playing; playing = 1;
while (playing) {

    ? simulate 
    i = 0;
    while (i < H) {
        i64 j; j = 0;
        while (j < W) {

            ? count neighbors of current cell
            i64 neighbors;
            neighbors = 0;

            i64 di; di = -1;
            while (di <= 1) {
                i64 dj; dj = -1;
                while (dj <= 1) {

                    if (di || dj) {
                        i64 ni; ni = i + di;
                        i64 nj; nj = j + dj;
                        if (ni >= 0 && ni < H && nj >= 0 && nj < W) {
                            i64 nIdx; nIdx = ni * W + nj;
                            if (prvBoard[nIdx]) {
                                neighbors = neighbors + 1;
                            }
                        }
                    }

                    dj = dj + 1;
                }
                di = di + 1;
            }


            ? apply GOL rules
            i64 idx; idx = i * W + j;
            if (prvBoard[idx]) {
                if (neighbors < 2 || neighbors > 3) {
                    curBoard[idx] = 0;
                }
                else {
                    curBoard[idx] = 1;
                }
            }
            else {
                if (neighbors != 3) {
                    curBoard[idx] = 0;
                }
                else {
                    curBoard[idx] = 1;
                }
            }

            j = j + 1;
        }
        i = i + 1;
    }

    ? copy and print board
    puts(cursorHome);
    i = 0;
    while (i < H) {
        i64 j; j = 0;
        while (j < W) {
            i64 idx; idx = i * W + j;
            if (curBoard[idx]) {
                putc('*');
            }
            else {
                putc(' ');
            }
            prvBoard[idx] = curBoard[idx];
            j = j + 1;
        }
        putc('\n');
        i = i + 1;
    }
}

