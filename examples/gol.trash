? TODO: add sleep time
? TODO: come up with more interesting initial conditions

? https://en.wikipedia.org/wiki/Conway's_Game_of_Life

i64 W; W = 20;
i64 H; H = 10;

? SIZE = (W+1) * H
? add one to width for new lines
? board will be printed with puts
u8[211] prvBoard;
u8[211] curBoard;

? initialize memory
i64 i; i = 0;
while (i < H) {
    i64 j; j = 0;
    while (j < W) {
        i64 idx; idx = i * (W+1) + j;
        prvBoard[idx] = ' ';
        curBoard[idx] = ' ';
        j = j + 1;
    }
    i64 idx; idx = i * (W+1) + j;
    prvBoard[idx] = '\n';
    curBoard[idx] = '\n';
    i = i + 1;
}
prvBoard[210] = itoc(0);
curBoard[210] = itoc(0);


? initial conditions
prvBoard[25] = '*';
prvBoard[26] = '*';
prvBoard[27] = '*';


? VT escape codes
u8[8] cursorClear;
cursorClear = ".[2J";
cursorClear[0] = itoc(27);
u8[8] cursorHome;
cursorHome = ".[H";
cursorHome[0] = itoc(27);

puts(cursorClear);

i64 playing; playing = 1;
while (playing) {

    ? simulate 
    i = 0;
    while (i < H) {
        i64 j; j = 0;
        while (j < W) {

            ? count neighbors of current cell
            i64 neighbors;
            neighbors = 0;

            i64 di; di = -1;
            while (di <= 1) {
                i64 dj; dj = -1;
                while (dj <= 1) {

                    if (di || dj) {
                        i64 ni; ni = i + di;
                        i64 nj; nj = j + dj;
                        if (ni >= 0 && ni < H && nj >= 0 && nj < W) {
                            i64 nIdx; nIdx = ni * (W+1) + nj;

                            if (ctoi(prvBoard[nIdx]) == ctoi('*')) {
                                neighbors = neighbors + 1;
                            }
                        }
                    }

                    dj = dj + 1;
                }
                di = di + 1;
            }


            i64 idx; idx = i * (W+1) + j;

            if (ctoi(prvBoard[idx]) == ctoi('*')) {
                if (neighbors < 2 || neighbors > 3) {
                    curBoard[idx] = ' ';
                }
                else {
                    curBoard[idx] = '*';
                }
            }
            else {
                if (neighbors != 3) {
                    curBoard[idx] = ' ';
                }
                else {
                    curBoard[idx] = '*';
                }
            }

            j = j + 1;
        }
        i = i + 1;
    }

    ? print game state
    puts(cursorHome);
    puts(curBoard);

    ? copy boards
    i = 0;
    while (i < H) {
        i64 j; j = 0;
        while (j < W) {
            i64 idx; idx = i * (W+1) + j;
            prvBoard[idx] = curBoard[idx];
            j = j + 1;
        }
        i = i + 1;
    }
}
